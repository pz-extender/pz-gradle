name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master, staging, trying]
  # Trigger the workflow on any pull request
  pull_request:

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  zomboidInstallation:
    name: Download Project Zomboid Server
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Setup steamcmd
        uses: CyberAndrii/setup-steamcmd@v1

      - name: Setup Project Zomboid cache
        id: zomboid-install
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/zomboid
          key: pz-${{ matrix.os }}-${{ hashFiles('.github/current.pzversion') }}

      - name: Install Project Zomboid
        run: |
          steamcmd +force_install_dir "$ZOMBOID_PATH" \
             +login anonymous \
             +app_update 380870 \
             +quit
        shell: bash
        env:
          ZOMBOID_PATH: ${{ runner.workspace }}/zomboid
        if: steps.zomboid-install.outputs.cache-hit != 'true'

      - name: Show contents of Zomboid install
        run: |
          find "$ZOMBOID_PATH" -maxdepth 2 -ls
        shell: bash
        env:
          ZOMBOID_PATH: ${{ runner.workspace }}/zomboid

  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v4

  codeInspection:
    name: Code Inspection
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2024.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_350187309 }}
          QODANA_ENDPOINT: 'https://qodana.cloud'

      - name: Qodana - Upload Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json
  test:
    name: Test
    needs:
      - gradleValidation
      - zomboidInstallation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        gradleVersion:
          - "8.10"
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest

    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup steamcmd
        uses: CyberAndrii/setup-steamcmd@v1

      - name: Setup Project Zomboid cache
        id: zomboid-install
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/zomboid
          key: pz-${{ matrix.os }}-${{ hashFiles('.github/current.pzversion') }}

      - name: Install Project Zomboid
        if: steps.zomboid-install.outputs.cache-hit != 'true'
        run: |
          steamcmd +force_install_dir "$ZOMBOID_PATH" \
             +login anonymous \
             +app_update 380870 \
             +quit
        shell: bash
        env:
          ZOMBOID_PATH: ${{ runner.workspace }}/zomboid

      - name: Run Linters and Test
        run: ./gradlew check -PtestGradleVersion="${{ matrix.gradleVersion }}"
        env:
          CI: "true"
          ZOMBOID_PATH: ${{ runner.workspace }}/zomboid

      - name: Collect Test Results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.gradleVersion }}-${{ runner.os }}
          path: ${{ github.workspace }}/build/reports/tests

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          check_name: 'Test Report (Gradle ${{ matrix.gradleVersion }}, ${{ matrix.os }})'
          report_paths: '**/build/test-results/test/TEST-*.xml'

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          dependency-graph: generate-and-submit

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          ARTIFACT="$NAME-$VERSION.jar"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=artifact::$ARTIFACT"
          echo "::set-output name=changelog::$CHANGELOG"

      - name: Build Plugin
        run: ./gradlew build

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.properties.outputs.artifact }}
          path: ./build/libs/${{ steps.properties.outputs.artifact }}

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
